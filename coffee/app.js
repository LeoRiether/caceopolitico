// Generated by CoffeeScript 1.10.0
(function() {
  var Audio, Dom, Game, Modal, Politico, Storage, ajax, audio, dom, game, modal, storage,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Audio = (function() {
    var audio, audioCtx, audioItv, audioSource, canPlaySound, setCanPlaySound;

    audio = {};

    Audio.prototype.getAudio = function() {
      return audio;
    };

    audioItv = void 0;

    audioCtx = void 0;

    Audio.prototype.getAudioCtx = function() {
      return audioCtx;
    };

    audioSource = void 0;

    Audio.prototype.ajaxAudio = function(url, key) {
      return ajax(url, ((function(_this) {
        return function(req) {
          return audioCtx.decodeAudioData(req.response, (function(buff) {
            return audio[key] = buff;
          }));
        };
      })(this)), 'arraybuffer');
    };

    function Audio() {
      this.ajaxAudio = bind(this.ajaxAudio, this);
      var error;
      try {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        audioCtx = new window.AudioContext();
        audioItv = setInterval(this.playSound, 100);
      } catch (error) {
        alert('Web Audio API não é suportado em seu browser');
      }
    }

    canPlaySound = true;

    setCanPlaySound = function() {
      return canPlaySound = true;
    };

    Audio.prototype.playSound = function() {
      if (!canPlaySound || !game.cacando) {
        return;
      }
      audioSource = audioCtx.createBufferSource();
      if (game.mdist < game.mouseRange[0]) {
        audioSource.buffer = audio[game.politico.audio[3]];
        setTimeout(setCanPlaySound, 300);
      } else if (game.mdist < game.mouseRange[1]) {
        audioSource.buffer = audio[game.politico.audio[2]];
        setTimeout(setCanPlaySound, 350);
      } else if (game.mdist < game.mouseRange[2]) {
        audioSource.buffer = audio[game.politico.audio[1]];
        setTimeout(setCanPlaySound, 350);
      } else {
        audioSource.buffer = audio[game.politico.audio[0]];
        setTimeout(setCanPlaySound, 400);
      }
      canPlaySound = false;
      audioSource.connect(audioCtx.destination);
      return audioSource.start(0);
    };

    return Audio;

  })();

  audio = new Audio();

  ajax = function(url, fn, respType) {
    var req;
    req = new XMLHttpRequest();
    req.open('GET', url, true);
    if (respType != null) {
      req.responseType = respType;
    }
    if (fn != null) {
      req.onload = fn.bind(null, req);
    }
    return req.send();
  };

  Politico = (function() {
    function Politico(name, unblock, img, audioKey, blocked) {
      var i, k, l;
      this.name = name;
      this.unblock = unblock;
      this.audioKey = audioKey;
      this.blocked = blocked;
      this.img = "img/" + img + ".png";
      this.audio = (function() {
        var j, results;
        results = [];
        for (i = j = 1; j <= 4; i = ++j) {
          k = this.audioKey + "00" + i;
          l = "audio/" + this.audioKey + "/" + k + ".wav";
          audio.ajaxAudio(l, k);
          results.push(k);
        }
        return results;
      }).call(this);
    }

    return Politico;

  })();

  Storage = (function() {
    function Storage() {
      var pontos;
      pontos = parseInt(localStorage.pontos) || (localStorage.pontos = 0);
      Object.defineProperty(this, 'pontos', {
        get: (function(_this) {
          return function() {
            return pontos;
          };
        })(this),
        set: (function(_this) {
          return function(v) {
            return localStorage.pontos = pontos = v;
          };
        })(this),
        configurable: false
      });
    }

    Storage.prototype.addPontos = function(a) {
      if (a == null) {
        a = 1;
      }
      return this.pontos += a;
    };

    return Storage;

  })();

  storage = new Storage();

  Game = (function() {
    var dist, screenWidth;

    function Game() {
      this.bodyClick = bind(this.bodyClick, this);
      this.bodyTouchMove = bind(this.bodyTouchMove, this);
      this.bodyMouseMove = bind(this.bodyMouseMove, this);
    }

    screenWidth = Math.max(Math.max(document.documentElement.clientWidth, window.innerWidth || 0), Math.max(document.documentElement.clientHeight, window.innerWidth || 0));

    Game.prototype.mouseRange = [0.0528033, 0.26, 0.520833, 0.7].map(function(e) {
      return e * screenWidth;
    });

    Game.prototype.mdist = Game.prototype.mouseRange[1];

    Game.prototype.politico = {};

    Game.prototype.politicoIdx = 0;

    Game.prototype.cacando = false;

    Game.prototype.politicos = [
      new Politico('Temer', 0, 'temer', 'Temer', (function() {
        return false;
      })), new Politico('Dilma', 5, 'Dilma', 'Dilma', (function() {
        return storage.pontos < 5;
      })), new Politico('Cunha', 10, 'Cunha', 'Cunha', (function() {
        return storage.pontos < 15;
      }))
    ];

    Game.prototype.bodyMouseMove = function(arg) {
      var x, y;
      x = arg.clientX, y = arg.clientY;
      if (!this.cacando) {
        return;
      }
      this.mdist = dist(x, y, this.politico.x, this.politico.y);
      if (this.mdist < this.mouseRange[0]) {
        return dom.body.style.cursor = 'pointer';
      } else {
        return dom.body.style.cursor = '';
      }
    };

    Game.prototype.bodyTouchMove = function(arg) {
      var a;
      a = arg.touches[0];
      return this.bodyMouseMove(a);
    };

    dist = function(x0, y0, x1, y1) {
      var dx, dy;
      dx = x1 - x0;
      dy = y1 - y0;
      return Math.sqrt(dx * dx + dy * dy);
    };

    Game.prototype.bodyClick = function() {
      if (!this.cacando) {
        return;
      }
      if (this.mdist < this.mouseRange[0]) {
        dom.body.style.removeProperty('background');
        dom.body.style.removeProperty('cursor');
        this.makePoliticoImg();
        storage.addPontos();
        setTimeout(modal.triggerAfterAnim, 1000);
        this.cacando = false;
        return this.mdist = this.mouseRange[1];
      }
    };

    Game.prototype.makePolitico = function() {
      var a, h, w;
      w = dom.getWidth();
      h = dom.getHeight();
      this.politico = this.politicos[this.politicoIdx];
      this.politico.x = Math.floor(Math.random() * (w - 0.05 * w) + 0.025 * w);
      this.politico.y = Math.floor(Math.random() * (h - 0.05 * h) + 0.025 * h);
      a = document.querySelector('.hint');
      a.style.top = this.politico.y + 'px';
      return a.style.left = this.politico.x + 'px';
    };

    Game.prototype.makePoliticoImg = function() {
      var img;
      img = document.createElement('img');
      img.setAttribute('src', this.politico.img);
      img.classList.add('polImg');
      img.style.left = this.politico.x + "px";
      img.style.top = this.politico.y + "px";
      dom.body.appendChild(img);
      return dom.polImgModal.setAttribute('src', this.politico.img);
    };

    Game.prototype.removePoliticoImg = function() {
      var polImg;
      polImg = document.querySelector('.polImg');
      if (polImg) {
        return polImg.remove();
      }
    };

    return Game;

  })();

  game = new Game();

  Modal = (function() {
    function Modal() {
      this.switchBtnClick = bind(this.switchBtnClick, this);
      this.startBtnClick = bind(this.startBtnClick, this);
      this.triggerAfterAnim = bind(this.triggerAfterAnim, this);
    }

    Modal.prototype.triggerAfterAnim = function() {
      this.setPontos();
      this.show();
      return game.removePoliticoImg();
    };

    Modal.prototype.hide = function() {
      return dom.modal.classList.add('hidden');
    };

    Modal.prototype.show = function() {
      return dom.modal.classList.remove('hidden');
    };

    Modal.prototype.toggle = function() {
      return dom.modal.classList.toggle('hidden');
    };

    Modal.prototype.startHide = function() {
      return dom.startModal.classList.add('hidden');
    };

    Modal.prototype.startShow = function() {
      this.updatePoliticosStart();
      return dom.startModal.classList.remove('hidden');
    };

    Modal.prototype.startToggle = function() {
      return dom.startModal.classList.toggle('hidden');
    };

    Modal.prototype.setPontos = function() {
      return dom.modalPontos.innerHTML = storage.pontos;
    };

    Modal.prototype.startBtnClick = function() {
      game.cacando = true;
      this.startHide();
      return game.makePolitico();
    };

    Modal.prototype.repeatBtnClick = function() {
      if (game.cacando) {
        return;
      }
      setTimeout((function() {
        return game.cacando = true;
      }), 800);
      game.removePoliticoImg();
      game.makePolitico();
      return modal.hide();
    };

    Modal.prototype.switchBtnClick = function() {
      this.hide();
      return this.startShow();
    };

    Modal.prototype.updatePoliticosStart = function() {
      return dom.polListStart.forEach(function(e, i) {
        if (game.politicos[i].blocked()) {
          return e.classList.add('blocked');
        } else {
          return e.classList.remove('blocked');
        }
      });
    };

    return Modal;

  })();

  modal = new Modal();

  Dom = (function() {
    var ael, throttle;

    function Dom() {
      this.body = document.body;
      this.modal = document.querySelector('.modal');
      this.modalPontos = this.modal.querySelector('.pontos');
      this.repeatBtn = this.modal.querySelector('.repeat');
      this.switchBtn = this.modal.querySelector('.switch');
      this.polImgModal = this.modal.querySelector('.polImgModal');
      this.startModal = document.querySelector('.start-modal');
      this.polListStart = this.startModal.querySelectorAll('.pol-list li');
      this.startBtn = this.startModal.querySelector('.btn');
      this.infoBtn = document.querySelector('.info-btn');
      this.infoWindow = document.querySelector('.info-window');
      this.closeInfo = this.infoWindow.querySelector('.close');
      this.bindEvents();
    }

    ael = function(d, e, l) {
      return d.addEventListener(e, l);
    };

    throttle = function(f, d) {
      var t;
      t = false;
      return function() {
        if (t) {
          return;
        }
        t = true;
        setTimeout((function() {
          return t = false;
        }), d);
        return f.apply(null, arguments);
      };
    };

    Dom.prototype.bindEvents = function() {
      var paused;
      ael(document, 'mousemove', throttle(game.bodyMouseMove, 80));
      ael(document, 'touchmove', throttle(game.bodyTouchMove, 80));
      ael(this.body, 'click', game.bodyClick);
      ael(this.repeatBtn, 'click', modal.repeatBtnClick);
      ael(this.switchBtn, 'click', modal.switchBtnClick);
      ael(this.startBtn, 'click', modal.startBtnClick);
      this.polListStart.forEach(((function(_this) {
        return function(li, i) {
          return ael(li, 'click', (function(e) {
            if (game.politicos[i].blocked()) {
              return;
            }
            game.politicoIdx = i;
            _this.startModal.querySelector('.active').classList.remove('active');
            return li.classList.add('active');
          }));
        };
      })(this)));
      paused = false;
      ael(this.infoBtn, 'click', ((function(_this) {
        return function() {
          _this.infoWindow.classList.toggle('hidden');
          return game.cacando = [paused, paused = game.cacando][0];
        };
      })(this)));
      return ael(this.closeInfo, 'click', ((function(_this) {
        return function() {
          _this.infoWindow.classList.add('hidden');
          return game.cacando = [paused, paused = game.cacando][0];
        };
      })(this)));
    };

    Dom.prototype.getWidth = function() {
      return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    };

    Dom.prototype.getHeight = function() {
      return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    };

    return Dom;

  })();

  dom = new Dom();

  modal.updatePoliticosStart();

}).call(this);
