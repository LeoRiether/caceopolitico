// Generated by CoffeeScript 1.10.0
(function() {
  var App, Politico, ajax;

  ajax = function(url, fn, respType) {
    var req;
    req = new XMLHttpRequest();
    req.open('GET', url, true);
    if (respType != null) {
      req.responseType = respType;
    }
    if (fn != null) {
      req.onload = fn.bind(null, req);
    }
    return req.send();
  };

  Politico = (function() {
    function Politico(name, unblock, img, audio) {
      this.name = name;
      this.unblock = unblock;
      this.img = "img/" + img + ".png";
      this.audio = "audio/" + audio;
    }

    Politico.prototype.blocked = true;

    return Politico;

  })();

  App = (function() {
    var ael, ajaxAudio, audio, audioCtx, audioItv, audioSource, bindEvents, bodyClick, bodyMouseMove, bodyTouchMove, cacando, cacheDom, countPoliticos, dist, dom, getHeight, getWidth, initAudio, initImg, mdist, mouseRange, politico, politicos, repeatBtnClick, throttle;

    function App() {
      App.self = this;
      cacheDom();
      bindEvents();
      initAudio();
      initImg();
      this.makePolitico();
    }

    dom = {};

    cacheDom = function() {
      return dom = {
        body: document.body,
        modal: document.querySelector('.modal'),
        repeatBtn: document.querySelector('.btn')
      };
    };

    bindEvents = function() {
      ael(document, 'mousemove', throttle(bodyMouseMove, 80));
      ael(document, 'touchmove', throttle(bodyTouchMove, 80));
      ael(dom.body, 'click', bodyClick);
      return ael(dom.repeatBtn, 'click', repeatBtnClick);
    };

    App.prototype.hideModal = function() {
      return dom.modal.classList.add('hidden');
    };

    App.prototype.showModal = function() {
      return dom.modal.classList.remove('hidden');
    };

    App.prototype.toggleModal = function() {
      return dom.modal.classList.toggle('hidden');
    };

    ael = function(d, e, l) {
      return d.addEventListener(e, l);
    };

    throttle = function(f, d) {
      var t;
      t = false;
      return function() {
        if (t) {
          return;
        }
        t = true;
        setTimeout((function() {
          return t = false;
        }), d);
        return f.apply(null, arguments);
      };
    };

    dist = function(x0, y0, x1, y1) {
      var dx, dy;
      dx = x1 - x0;
      dy = y1 - y0;
      return Math.sqrt(dx * dx + dy * dy);
    };

    mouseRange = [10, 50, 200, 400];

    mdist = -1;

    cacando = true;

    bodyMouseMove = function(arg) {
      var audioItv, x, y;
      x = arg.clientX, y = arg.clientY;
      if (!cacando) {
        return;
      }
      mdist = dist(x, y, politico.x, politico.y);
      clearInterval(audioItv);
      if (mdist < mouseRange[0]) {
        audioItv = setInterval(App.self.playSound.bind(audio.beep), 150);
        dom.body.style.background = '#21cc0e';
        return dom.body.style.cursor = 'pointer';
      } else {
        audioItv = setInterval(App.self.playSound.bind(audio.beep), mdist * 2);
        if (mdist < mouseRange[1]) {
          dom.body.style.background = '#e4dd27';
        } else if (mdist < mouseRange[2]) {
          dom.body.style.background = '#f27215';
        } else if (mdist < mouseRange[3]) {
          dom.body.style.background = '#f75c19';
        } else {
          dom.body.style.background = '#ff4d00';
        }
        return dom.body.style.cursor = '';
      }
    };

    bodyTouchMove = function(arg) {
      var a;
      a = arg.touches[0];
      return bodyMouseMove(a);
    };

    bodyClick = function() {
      if (!cacando) {
        return;
      }
      if (mdist < mouseRange.s) {
        dom.body.style.removeProperty('background');
        dom.body.style.removeProperty('cursor');
        App.self.makePoliticoImg();
        countPoliticos++;
        setTimeout(App.self.showModal, 1000);
        cacando = false;
        return mdist = mouseRange.s + 1;
      }
    };

    repeatBtnClick = function() {
      if (cacando) {
        return;
      }
      setTimeout((function() {
        return cacando = true;
      }), 800);
      App.self.removePoliticoImg();
      App.self.makePolitico();
      return App.self.hideModal();
    };

    getWidth = function() {
      return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    };

    getHeight = function() {
      return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    };

    politico = {};

    countPoliticos = 0;

    politicos = [new Politico('Temer', 0, 'temer', 'beep.mp3', new Politico('Dilma', 5, 'dilma', 'beep.mp3'))];

    App.prototype.makePolitico = function() {
      var h, w;
      w = getWidth();
      h = getHeight();
      politico = politicos[0];
      politico.x = Math.floor(Math.random() * (w - 100) + 100);
      politico.y = Math.floor(Math.random() * (h - 100) + 100);
      return console.info(politico.name + " " + politico.x + " " + politico.y + " " + politico.img + " " + politico.audio);
    };

    App.prototype.makePoliticoImg = function() {
      var img;
      img = document.createElement('img');
      img.setAttribute('src', politico.img);
      img.classList.add('polImg');
      img.style.left = politico.x + "px";
      img.style.top = politico.y + "px";
      return dom.body.appendChild(img);
    };

    App.prototype.removePoliticoImg = function() {
      var polImg;
      polImg = document.querySelector('.polImg');
      if (polImg) {
        return polImg.remove();
      }
    };

    audio = {};

    audioItv = void 0;

    App.prototype.getAudio = function() {
      return audio;
    };

    audioCtx = void 0;

    audioSource = void 0;

    ajaxAudio = function(url, key) {
      return ajax((url, function(req) {
        return audioCtx.decodeAudioData(req.response, (function(buff) {
          return audio[key] = buff;
        }));
      }, 'arraybuffer'));
    };

    initAudio = function() {
      var error;
      try {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        audioCtx = new AudioContext();
        return ajaxAudio('audio/beep.mp3', 'beep');
      } catch (error) {
        return alert('Web Audio API não é suportado em seu browser');
      }
    };

    App.prototype.playSound = function(buff) {
      return;
      audioSource = audioSource || audioCtx.createBufferSource();
      audioSource.buffer = buff;
      audioSource.connect(audioCtx.destination);
      return audioSource.start(0);
    };

    initImg = function() {
      var i, len, pol, results;
      results = [];
      for (i = 0, len = politicos.length; i < len; i++) {
        pol = politicos[i];
        results.push(ajax(pol.img));
      }
      return results;
    };

    return App;

  })();

  this.addEventListener('load', function() {
    return window.app = new App();
  });

}).call(this);
